%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.2 and Fixed-Point Designer 5.4           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [ e,W,bhat ] = noise_cancel_fixpt( s,n)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here

% p=inputParser;
% argName='bhat W e';
% default=[zeros(1,itno) zeros(1,size(bhat,1)) zeros(1,itno)] ;
% % argName1='W';
% % default=zeros(1,size(bhat,1));
% % argName2='e';
% % default=zeros(1,itno);
% addOptional(p,argName,default);
fm = get_fimath();

itno=fi(length(s)-10, 0, 5, 0, fm);
bhat=fi(zeros(1,fi_toint(itno)), 0, 1, 0, fm);
W=fi(zeros(1,size(bhat,fi(1, 0, 1, 0, fm))), 0, 1, 0, fm);
e=fi(zeros(1,fi_toint(itno)), 0, 1, 0, fm);

% if nargin < 2
%   error('signal and noise are required inputs')
% end
% 
% if nargin < 3
%   e = zeros(1,itno);
%   W=zeros(1,size(bhat,1));
%   bhat=zeros(1,itno);
% end
% 
% if nargin < 4
%   W=zeros(1,size(bhat,1));
%   bhat=zeros(1,itno);
% end
% if nargin < 5
%     bhat=zeros(1,itno);
% end
% 




mu=fi(1, 0, 1, 0, fm);


yhat=fi(0, 0, 1, 0, fm);
y=fi(0, 0, 1, 0, fm);

for i=fi(1, 0, 1, 0, fm):fi_signed(itno)-fi(1, 0, 1, 0, fm)
    for j=1:length(bhat(:,1))
        W(j)=n(fi_signed(i+length(bhat(:,1)))-j);
    end
    y(:)=s(i);
    yhat(:)=W*bhat(:,i);
    e(i)=fi_signed(y)-yhat;
    bhat(:,i+fi(1, 0, 1, 0, fm))=bhat(:,i)+mu*e(i)*transpose(W);
end
end



function y = fi_signed(a)
    coder.inline( 'always' );
    if isfi( a ) && ~(issigned( a ))
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = fi( a, new_nt, fimath( a ) );
    else
        y = a;
    end
end


function y = fi_toint(u)
    coder.inline( 'always' );
    if isfi( u )
        nt = numerictype( u );
        s = nt.SignednessBool;
        wl = nt.WordLength;
        y = int32( fi( u, s, wl, 0, hdlfimath ) );
    else
        y = int32( u );
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
